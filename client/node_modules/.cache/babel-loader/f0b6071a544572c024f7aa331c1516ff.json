{"ast":null,"code":"import axios from 'axios';\naxios.defaults.withCredentials = true;\nvar service = axios.create({\n  baseURL: process.env.NODE_ENV === 'production' ? '/api' : 'http://localhost:5000/api',\n  withCredentials: true\n});\n\nvar errHandler = function errHandler(err) {\n  console.error(err);\n\n  if (err.response && err.response.data) {\n    console.error(\"API response\", err.response.data);\n    throw err.response.data.message;\n  }\n\n  throw err;\n};\n\nexport default {\n  service: service,\n  // This method is synchronous and returns true or false\n  // To know if the user is connected, we just check if we have a value for localStorage.getItem('user')\n  isLoggedIn: function isLoggedIn() {\n    return localStorage.getItem('user') != null;\n  },\n  // This method returns the user from the localStorage\n  // Be careful, the value is the one when the user logged in for the last time\n  getLocalStorageUser: function getLocalStorageUser() {\n    return JSON.parse(localStorage.getItem('user'));\n  },\n  // This method signs up and logs in the user\n  signup: function signup(userInfo) {\n    console.log(userInfo);\n    return service.post('/signup', userInfo, {\n      headers: {\n        'Accept': 'application/json',\n        'Content-Type': 'multipart/form-data'\n      }\n    }).then(function (res) {\n      console.log('adsfsd', res); // If we have localStorage.getItem('user') saved, the application will consider we are loggedin\n      //localStorage.setItem('user', JSON.stringify(res.data))\n      //localStorage.setItem('artistType', res.data.artistType)\n\n      return res.data;\n    }).catch(errHandler);\n  },\n  login: function login(username, password) {\n    return service.post('/login', {\n      username: username,\n      password: password\n    }).then(function (res) {\n      // If we have localStorage.getItem('user') saved, the application will consider we are loggedin\n      localStorage.setItem('user', JSON.stringify(res.data));\n      localStorage.setItem('artistType', res.data.artistType);\n      return res.data;\n    }).catch(errHandler);\n  },\n  logout: function logout() {\n    localStorage.removeItem('user');\n    return service.get('/logout');\n  }\n};","map":{"version":3,"sources":["/Users/robertokonanz/Documents/Ironhack/project3/bandme/client/src/api.js"],"names":["axios","defaults","withCredentials","service","create","baseURL","process","env","NODE_ENV","errHandler","err","console","error","response","data","message","isLoggedIn","localStorage","getItem","getLocalStorageUser","JSON","parse","signup","userInfo","log","post","headers","then","res","catch","login","username","password","setItem","stringify","artistType","logout","removeItem","get"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACAA,KAAK,CAACC,QAAN,CAAeC,eAAf,GAAiC,IAAjC;AAGA,IAAMC,OAAO,GAAGH,KAAK,CAACI,MAAN,CAAa;AAC3BC,EAAAA,OAAO,EAAEC,OAAO,CAACC,GAAR,CAAYC,QAAZ,KAAyB,YAAzB,GAAwC,MAAxC,GAAiD,2BAD/B;AAE3BN,EAAAA,eAAe,EAAE;AAFU,CAAb,CAAhB;;AAKA,IAAMO,UAAU,GAAG,SAAbA,UAAa,CAAAC,GAAG,EAAI;AACxBC,EAAAA,OAAO,CAACC,KAAR,CAAcF,GAAd;;AACA,MAAIA,GAAG,CAACG,QAAJ,IAAgBH,GAAG,CAACG,QAAJ,CAAaC,IAAjC,EAAuC;AACrCH,IAAAA,OAAO,CAACC,KAAR,CAAc,cAAd,EAA8BF,GAAG,CAACG,QAAJ,CAAaC,IAA3C;AACA,UAAMJ,GAAG,CAACG,QAAJ,CAAaC,IAAb,CAAkBC,OAAxB;AACD;;AACD,QAAML,GAAN;AACD,CAPD;;AASA,eAAe;AACbP,EAAAA,OAAO,EAAEA,OADI;AAGb;AACA;AACAa,EAAAA,UALa,wBAKA;AACX,WAAOC,YAAY,CAACC,OAAb,CAAqB,MAArB,KAAgC,IAAvC;AACD,GAPY;AASb;AACA;AACAC,EAAAA,mBAXa,iCAWS;AACpB,WAAOC,IAAI,CAACC,KAAL,CAAWJ,YAAY,CAACC,OAAb,CAAqB,MAArB,CAAX,CAAP;AACD,GAbY;AAeb;AACAI,EAAAA,MAhBa,kBAgBNC,QAhBM,EAgBI;AACfZ,IAAAA,OAAO,CAACa,GAAR,CAAYD,QAAZ;AACA,WAAOpB,OAAO,CACXsB,IADI,CACC,SADD,EAEHF,QAFG,EAGH;AAAEG,MAAAA,OAAO,EAAE;AACT,kBAAU,kBADD;AAET,wBAAgB;AAFP;AAAX,KAHG,EASJC,IATI,CASC,UAAAC,GAAG,EAAI;AACXjB,MAAAA,OAAO,CAACa,GAAR,CAAY,QAAZ,EAAqBI,GAArB,EADW,CAEX;AACA;AACA;;AACA,aAAOA,GAAG,CAACd,IAAX;AACD,KAfI,EAgBJe,KAhBI,CAgBEpB,UAhBF,CAAP;AAiBD,GAnCY;AAqCbqB,EAAAA,KArCa,iBAqCPC,QArCO,EAqCGC,QArCH,EAqCa;AACxB,WAAO7B,OAAO,CACXsB,IADI,CACC,QADD,EACW;AACdM,MAAAA,QAAQ,EAARA,QADc;AAEdC,MAAAA,QAAQ,EAARA;AAFc,KADX,EAKJL,IALI,CAKC,UAAAC,GAAG,EAAI;AACX;AACAX,MAAAA,YAAY,CAACgB,OAAb,CAAqB,MAArB,EAA6Bb,IAAI,CAACc,SAAL,CAAeN,GAAG,CAACd,IAAnB,CAA7B;AACAG,MAAAA,YAAY,CAACgB,OAAb,CAAqB,YAArB,EAAmCL,GAAG,CAACd,IAAJ,CAASqB,UAA5C;AACA,aAAOP,GAAG,CAACd,IAAX;AACD,KAVI,EAWJe,KAXI,CAWEpB,UAXF,CAAP;AAYD,GAlDY;AAoDb2B,EAAAA,MApDa,oBAoDJ;AACPnB,IAAAA,YAAY,CAACoB,UAAb,CAAwB,MAAxB;AACA,WAAOlC,OAAO,CACXmC,GADI,CACA,SADA,CAAP;AAED;AAxDY,CAAf","sourcesContent":["import axios from 'axios'\naxios.defaults.withCredentials = true\n\n\nconst service = axios.create({\n  baseURL: process.env.NODE_ENV === 'production' ? '/api' : 'http://localhost:5000/api',\n  withCredentials: true\n})\n\nconst errHandler = err => {\n  console.error(err)\n  if (err.response && err.response.data) {\n    console.error(\"API response\", err.response.data)\n    throw err.response.data.message\n  }\n  throw err\n}\n\nexport default {\n  service: service,\n\n  // This method is synchronous and returns true or false\n  // To know if the user is connected, we just check if we have a value for localStorage.getItem('user')\n  isLoggedIn() {\n    return localStorage.getItem('user') != null\n  },\n\n  // This method returns the user from the localStorage\n  // Be careful, the value is the one when the user logged in for the last time\n  getLocalStorageUser() {\n    return JSON.parse(localStorage.getItem('user'))\n  },\n\n  // This method signs up and logs in the user\n  signup(userInfo) {\n    console.log(userInfo)\n    return service\n      .post('/signup', \n        userInfo,\n        { headers: {\n          'Accept': 'application/json',\n          'Content-Type': 'multipart/form-data'\n        }\n        }\n        )\n      .then(res => {\n        console.log('adsfsd',res)\n        // If we have localStorage.getItem('user') saved, the application will consider we are loggedin\n        //localStorage.setItem('user', JSON.stringify(res.data))\n        //localStorage.setItem('artistType', res.data.artistType)\n        return res.data\n      })\n      .catch(errHandler)\n  },\n\n  login(username, password) {\n    return service\n      .post('/login', {\n        username,\n        password,\n      })\n      .then(res => {\n        // If we have localStorage.getItem('user') saved, the application will consider we are loggedin\n        localStorage.setItem('user', JSON.stringify(res.data))\n        localStorage.setItem('artistType', res.data.artistType)\n        return res.data\n      })\n      .catch(errHandler)\n  },\n\n  logout() {\n    localStorage.removeItem('user')\n    return service\n      .get('/logout')\n  },\n\n  // This is an example on how to use this method in a different file\n  // api.getCountries().then(countries => { /* ... */ })\n \n}\n"]},"metadata":{},"sourceType":"module"}